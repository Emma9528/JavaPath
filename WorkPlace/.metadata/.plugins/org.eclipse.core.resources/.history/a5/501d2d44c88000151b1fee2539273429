
public class SList {
	/**
	 *  The SList class is a singly-linked implementation of the linked list
	 *  abstraction.  SLists are mutable data structures, which can grow at either
	 *  end.
	 *
	 *  @author Kathy Yelick and Jonathan Shewchuk
	 **/
	private SListNode head;
	  private int size;

	  /**
	   *  SList() constructs an empty list.
	   **/

	  public SList() {
	    size = 0;
	    head = null;
	  }

	  /**
	   *  isEmpty() indicates whether the list is empty.
	   *  @return true if the list is empty, false otherwise.
	   **/

	  public boolean isEmpty() {
	    return size == 0;
	  }

	  /**
	   *  length() returns the length of this list.
	   *  @return the length of this list.
	   **/

	  public int length() {
	    return size;
	  }

	  /**
	   *  insertFront() inserts item "obj" at the beginning of this list.
	   *  @param obj the item to be inserted.
	   **/

	  public void insertFront(Object obj) {
	    head = new SListNode(obj, head);
	    size++;
	  }

	  /**
	   *  insertEnd() inserts item "obj" at the end of this list.
	   *  @param obj the item to be inserted.
	   **/

	  public void insertEnd(Object obj) {
	    if (head == null) {
	      head = new SListNode(obj);
	    } else {
	      SListNode node = head;
	      while (node.next != null) {
	        node = node.next;
	      }
	      node.next = new SListNode(obj);
	    }
	    size++;
	  }

	  /**
	   *  nth() returns the item at the specified position.  If position < 1 or
	   *  position > this.length(), null is returned.  Otherwise, the item at
	   *  position "position" is returned.  The list does not change.
	   *  @param position the desired position, from 1 to length(), in the list.
	   *  @return the item at the given position in the list.
	   **/

	  public Object nth(int position) {
	    SListNode currentNode;

	    if ((position < 1) || (head == null)) {
	      return null;
	    } else {
	      currentNode = head;
	      while (position > 1) {
	        currentNode = currentNode.next;
	        if (currentNode == null) {
	          return null;
	        }
	        position--;
	      }
	      return currentNode.item;
	    }
	  }
	  

	  /**
	   *  squish() takes this list and, wherever two or more consecutive items are
	   *  equal(), it removes duplicate nodes so that only one consecutive copy
	   *  remains.  Hence, no two consecutive items in this list are equal() upon
	   *  completion of the procedure.
	   *
	   *  After squish() executes, the list may well be shorter than when squish()
	   *  began.  No extra items are added to make up for those removed.
	   *
	   *  For example, if the input list is [ 0 0 0 0 1 1 0 0 0 3 3 3 1 1 0 ], the
	   *  output list is [ 0 1 0 3 1 0 ].
	   *
	   *  IMPORTANT:  Be sure you use the equals() method, and not the "=="
	   *  operator, to compare items.
	   **/

	  public void squish() {
		  if (head == null) {
		      return;
		    } else {
		      SListNode node = head;
		      while (node.next != null) {
		    	  if(node.item.equals(node.next.item))
		        node.next=new SListNode(node.next.next.item, node.next.next.next);
		      }
		      node=node.next;
		    }
		    size++;
			  
		  
		  
		  
	  }

	  /**
	   *  twin() takes this list and doubles its length by replacing each node
	   *  with two consecutive nodes referencing the same item.
	   *
	   *  For example, if the input list is [ 3 7 4 2 2 ], the
	   *  output list is [ 3 3 7 7 4 4 2 2 2 2 ].
	   *
	   *  IMPORTANT:  Do not try to make new copies of the items themselves.
	   *  Just copy the references to the items.
	   **/

	  public void twin() {
		  
		  if (head == null) {
		      return;
		    } else {
		    	SListNode node = head;
			      while (node!= null) {
			    	node.next = new SListNode(node.item,node.next);
			    	size++;
			        node = node.next.next;
			        
			      }
			      
			    }
		     
		      
		    
		    // Fill in your solution here.  (Ours is seven lines long.)
	  }

	  /**
	   *  toString() converts the list to a String.
	   *  @return a String representation of the list.
	   **/

	  public String toString() {
	    
	    Object obj;
	    String result = "[  ";

	    SListNode cur = head;

	    while (cur != null) {
	      obj = cur.item;
	      result = result + obj.toString() + "  ";
	      cur = cur.next;
	    }
	    result = result + "]";
	    return result;
	  }


}